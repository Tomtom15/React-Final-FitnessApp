import React, { Component } from 'react'
import { Text, View,TouchableHighlight,Keyboard} from 'react-native'
import DropDownPicker from 'react-native-dropdown-picker';
import firebase from 'react-native-firebase'

import Helpers from '../../utils/Helper'
import constant from '../../config/constant'
import Container from '../../components/container/Container'
import Indicator from '../../components/indicator/Indicator';
import styles from './styles'
import CommonStyles from '../../styles/CommonStyles'
import string from '../../config/string'
import Input from '../../components/input/Input'
import colors from '../../theme/colors'
import Button from '../../components/button/Button'


let data = [{
    value: 'Weight Loss',
    label: 'Weight Loss'
  }, {
    value: 'Muscle Power',
    label:'Muscle Power'
  }, {
    value: 'Flexibility',
    label:'Flexibility'
  },{
      value:'Arm Strength',
      label:'Arm Strength'
  },{
      value:'Leg Strength',
      label:'Leg Strength'
  }];

export class HomeScreen extends Component {
    constructor(props){
        super(props)
        this.state={
            uid: "",
            isLoading:false,
            weight:"",
            err_weight:"",
            height:"",
            err_height:"",
            age:"",
            err_age:"",
            goal:""
        }
    }
    async componentDidMount(){
       let uid = await Helpers.getFromPref(constant.PREF_USER_ID,"Not Found")
       this.setState({
           uid
       })
    }
    validate(){
        let error = true
        if(this.state.height && this.state.height!=""){
            this.setState({
                err_height:""
            })
            error = false
        }else{
            this.setState({
                err_height:"Please enter height"
            })
            error=true
        }
        if(this.state.weight){
            this.setState({
                err_weight:""
            })
            error=false
        }else{
            this.setState({
                err_weight:"Please enter weight"
            })
            error=true
        }
        if(this.state.age){
            this.setState({
                err_age:""
            })
            error=false
        }else{
            error=false
            this.setState({
                err_age:"Please enter age"
            })
        }
        if(this.state.goal){
            error=false
            this.setState({
                err_goal:""
            })
        }else{
            error=true
            this.setState({
                err_goal:"Select a goal"
        })
    }
    if(error){
        alert("please fill all details")
    }else{
        this.writeUserData()
    }
}
writeUserData(){
    const{height,weight,age,goal}=this.state
    firebase.database().ref('UserData/').set({
        uid,
        height,weight,age,goal
    }).then((data)=>{
        //success callback
        console.log('data ' , data)
    }).catch((error)=>{
        //error callback
        console.log('error ' , error)
    })
}
    selectedItem(data){
        alert(data)
        this.setState({
            goal:data
        })
    }
    render() {
        return (
        <Container
            hidden={false}
            navigation={this.props.navigation}
            title="User Profile"
            isHeader
            leftMenu
        >
            <Indicator isVisible={this.state.isLoading}/> 
            <View style={styles.row}>
                <Text style={[CommonStyles.boldText,styles.label]}>{string.height}</Text>
                <Input
                     setRef={(ref) => { this.height = ref }}
                     returnKeyType="next"
                     style={styles.input}
                     inputStyle={[CommonStyles.normalText,{color:colors.black}]}
                     value={this.state.height}
                     placeholder={string.placeholder_height}
                     autoCapitalize='none'
                     keyboardType='numeric'
                     errorText={this.state.err_height}
                     editable={true}
                     placeholderTextColor={colors.gray}                              
                     onChangeText={(text) => this.setState({
                                                height:text
                                                })}
                     onSubmitEditing={() => this.weight.focus() }                                                 
                    
                />
            </View>
            <View style={styles.row}>
                <Text style={[CommonStyles.boldText,styles.label]}>{string.weight}</Text>
                <Input
                     setRef={(ref) => { this.weight = ref }}
                     returnKeyType="next"
                     style={styles.input}
                     inputStyle={[CommonStyles.normalText,{color:colors.black}]}
                     value={this.state.weight}
                     placeholder={string.placeholder_weight}
                     autoCapitalize='none'
                     keyboardType='numeric'
                     errorText={this.state.err_weight}
                     editable={true}
                     placeholderTextColor={colors.gray}                              
                     onChangeText={(text) => this.setState({
                                                weight:text
                                                })}
                     onSubmitEditing={() => this.age.focus()}                                                 
                    
                />
            </View>
            <View style={styles.row}>
                <Text style={[CommonStyles.boldText,styles.label]}>{string.age}</Text>
                <Input
                     setRef={(ref) => { this.age = ref }}
                     returnKeyType="next"
                     style={styles.input}
                     inputStyle={[CommonStyles.normalText,{color:colors.black}]}
                     value={this.state.age}
                     placeholder={string.placeholder_age}
                     autoCapitalize='none'
                     keyboardType='numeric'
                     errorText={this.state.err_age}
                     editable={true}
                     placeholderTextColor={colors.gray}                              
                     onChangeText={(text) => this.setState({
                                                age:text
                                                })}
                     onSubmitEditing={() => Keyboard.dismiss()}                                                 
                    
                />
            </View>
            <View style={styles.row}>
                <Text style={[CommonStyles.boldText,styles.label]}>{string.placeholder_goal}</Text>
            </View>
            <DropDownPicker
                items={data}
                defaultValue={this.state.goal}
                containerStyle={{height: 40}}
                style={{backgroundColor: '#fafafa'}}
                itemStyle={{
                    justifyContent: 'flex-start'
                }}
                dropDownStyle={{backgroundColor: '#fafafa'}}
                onChangeItem={item => this.setState({
                    goal: item.value
                })}
            />
                                        <Button
                                            setRef={(ref) => { this.button = ref }}
                                            title={string.save}
                                            autoCapitalize={false}
                                            style={[CommonStyles.normalText,styles.button]}
                                            onButtonClick={() =>
                                                this.validate()
                                            }
                                        />             
        </Container>
        )
    }
}

export default HomeScreen
